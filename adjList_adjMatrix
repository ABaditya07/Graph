#include<iostream>
#include<unordered_map>
#include<list>
using namespace std;
1.....................AdjMatrix

int main()
{
    int n, m;
    cin >> n >> m;
    // adjacency matrix for undirected graph
    // time complexity: O(n)
    int adj[n+1][n+1];
    for(int i = 0; i < m; i++)
    {
        int u, v;
        cin >> u >> v;
        adj[u][v] = 1;
        adj[v][u] = 1  // this statement will be removed in case of directed graph
    }
    return 0;
}


2...............AdjList

class graph{
    public:
     unordered_map<int,list<int>>adj;

     void addEdge(int u, int v,bool direction){
        // direction 0 = undirected graph
        // direction 1 = directed graph
        adj[u].push_back(v);
        if(direction==0){
            adj[v].push_back(u);
        }
     }

     void printAdjList(){
        for(auto i:adj){
            cout<<i.first<<"->";
            for(auto j:i.second){
                cout<<j<<",";
            }
            cout<<endl;
        }
     }
};

int main(){
    int n;
    cout<<"Enter the number of nodes"<<endl;
    cin>>n;
    int m;
    cout<<"Enter the number of edeges"<<endl;
    cin>>m;

    graph g;

    for(int i=0;i<m;i++){
        int u,v;
        cin>>u>>v;
        g.addEdge(u,v,0);

    }
    g.printAdjList();

    return 0;
}


output:
Enter the number of nodes
2  
Enter the number of edeges
5
0 1
1 2
2 3
3 1
1 3 
3->2,1,1,
2->1,3,
1->0,2,3,3,
0->1,
